name: Consolidated CI/CD testing

on:
  push:
    branches:
      - '*'
  pull_request:
    branches:
      - '*'

jobs:

  test-unit:
    name: Run unit tests
    strategy:
      matrix:
        python-version: [3.12] # ["3.10", "3.11", "3.12", "3.13"]
        os: [macos-latest, ubuntu-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
    - name: Install Ard
      run: |
        pip install .[dev]
    - name: Run unit tests with coverage
      run: |
        pytest --cov=ard --cov-fail-under=80 test/unit

  test-system:
    name: Run system tests
    needs: test-unit
    strategy:
      matrix:
        python-version: [3.12] # ["3.10", "3.11", "3.12", "3.13"]
        os: [macos-latest, ubuntu-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
    - name: Install Ard
      run: |
        pip install .[dev]
    - name: Run system tests with coverage
      run: |
        pytest --cov=ard --cov-fail-under=50 test/system
        # pytest --cov=ard --cov-fail-under=80 test/system

  find-examples:
    name: Find all examples
    needs: [test-unit, test-system]
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    - name: Find example python scripts
      id: find_scripts
      run: |
        echo "scripts<<EOF" >> $GITHUB_OUTPUT
        find examples -mindepth 2 -maxdepth 2 -name "*.py" | jq -R -s -c 'split("\n")[:-1]' >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
    outputs:
      scripts: ${{ steps.find_scripts.outputs.scripts }}

  test-examples:
    name: Run all examples
    needs: find-examples
    strategy:
      fail-fast: false
      matrix:
        python-version: [3.12] # ["3.10", "3.11", "3.12", "3.13"]
        os: [macos-latest, ubuntu-latest, windows-latest]
        script: ${{fromJson(needs.find-examples.outputs.scripts)}}
    runs-on: ${{ matrix.os }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
    - name: Install Ard
      run: |
        pip install .[dev]
    - name: Run examples
      shell: python
      run: |
        import os
        import pathlib
        import subprocess

        env = os.environ.copy()
        env["MPLBACKEND"] = "Agg"  # Non-interactive backend

        path_script = pathlib.Path("${{ matrix.script }}").absolute()
        print(f"RUNNING {path_script}")
        subprocess.run(
          ["python", str(path_script.name)],
          check=True,
          cwd=str(path_script.parent),
          env=env,
        )
