
name: FLORIS_GCH_MF # name for this input file
description: base GCH model settings # description of the contents of this input file.
  # (this is currently only for the user's reference)
floris_version: v4.0.0 # earliest verion of FLORIS this input file supports
  # (this is currently only for the user's reference)

logging: # configure the logging level and where to show the logs
  console: # settings for logging to the console (i.e. terminal)
    enable: true # can be "true" or "false"
    level: WARNING # set threshold to show output: messages at this level or higher will be shown
      # can be one of "CRITICAL", "ERROR", "WARNING", "INFO", "DEBUG"
  file: # settings for logging to a file
    enable: false # can be "true" or "false"
    level: WARNING # set threshold to show output: messages at this level or higher will be shown
      # can be one of "CRITICAL", "ERROR", "WARNING", "INFO", "DEBUG"

solver: # configure the solver for the type of simulation
  type: turbine_grid # select the solver type.
    # can be one of: "turbine_grid", "flow_field_grid", "flow_field_planar_grid"
  turbine_grid_points: 3 # options for the turbine type selected above
    # see the solver documentation for available parameters.

# configure each turbine's type and their placement within the wind farm
farm:
  layout_x: # coordinates for the turbine locations in the x-direction
  - 0.0
  - 630.0
  - 1260.0
  layout_y: # coordinates for the turbine locations in the y-direction
  - 0.0
  - 0.0
  - 0.0
    # x-direction is typically considered to be the streamwise direction (left,
    # right) when the wind is out of the west. y-direction is typically
    # considered to be the spanwise direction (up, down) when the wind is out of
    # the west. the order of the coordinates here corresponds to the index of
    # the turbine in the primary data structures
  turbine_type: # listing of turbine types for placement at coordinates above
  - !include ../data/FLORIS_turbine_library/IEA-3p4-130-RWT.yaml
    # list length must be 1 or the same as ``layout_x`` and ``layout_y``; if it
    # is a single value, all turbines are of the same type; otherwise, turbine
    # type is mapped to the location at the same index in ``layout_x`` and
    # ``layout_y``. types can be either a name included in the turbine_library
    # or a full definition of a wind turbine directly

flow_field: # configure the atmospheric conditions
  air_density: 1.225 # air density
  reference_wind_height: -1 # height to consider the "center" of the vertical wind speed profile
    # with a shear exponent not 1, the wind speed at this height will be the
    # value given in ``wind_speeds``; above and below this height, the wind
    # speed will change according to the shear profile; see
    # :py:meth:`.FlowField.initialize_velocity_field`. for farms consisting of
    # one wind turbine type, use ``reference_wind_height: -1`` to use the hub
    # height of the wind turbine definition. for multiple wind turbine types,
    # the reference wind height must be given explicitly.
  turbulence_intensities: # the level of turbulence intensity level in the wind
  - 0.06
  wind_directions: # wind directions to include in the simulation
  - 270.0
    # 0 is north and 270 is west
  wind_shear: 0.585 # exponent used to model the wind shear profile
  # wind_shear: 0.12 # exponent used to model the wind shear profile
    # see :py:meth:`.FlowField.initialize_velocity_field`
  wind_speeds: # wind speeds to include in the simulation
  - 8.0
  wind_veer: 0.0 # wind veer as a constant value for all points in the grid

  multidim_conditions: # conditions specified for use with the multi-dimensional Cp/Ct capbility
    Tp: 2.5
    Hs: 3.01
    # These conditions are external to FLORIS and specified by the user. They
    # are used internally through a nearest-neighbor selection process to choose
    # the correct Cp/Ct interpolants to use. These conditions are only used with
    # the ``multidim_cp_ct`` velocity deficit model.

wake: # configure the wake model

  model_strings: # select the models to use for the simulation
    combination_model: sosfs # the wake combination model
    deflection_model: gauss # the wake deflection model
    turbulence_model: crespo_hernandez # the wake turbulence model
    velocity_model: gauss # the wake velocity deficit model
    # see :py:mod:`~.wake` for a list
    # of available models and their descriptions.
  enable_secondary_steering: true # can be "true" or "false"
  enable_yaw_added_recovery: true # can be "true" or "false"
  enable_active_wake_mixing: false # can be "true" or "false"
  enable_transverse_velocities: true # can be "true" or "false"
  wake_deflection_parameters: # configure the parameters for the wake deflection model above
    gauss:
      ad: 0.0
      alpha: 0.58
      bd: 0.0
      beta: 0.077
      dm: 1.0
      ka: 0.38
      kb: 0.004
    jimenez:
      ad: 0.0
      bd: 0.0
      kd: 0.05
    # additional blocks can be provided for models that are not enabled, but the
    # enabled model must have a corresponding parameter block

  wake_velocity_parameters: # configure parameters for the wake velocity deficit model above
    cc:
      a_s: 0.179367259
      b_s: 0.0118889215
      c_s1: 0.0563691592
      c_s2: 0.13290157
      a_f: 3.11
      b_f: -0.68
      c_f: 2.41
      alpha_mod: 1.0
    gauss:
      alpha: 0.58
      beta: 0.077
      ka: 0.38
      kb: 0.004
    jensen:
      we: 0.05
    # additional blocks can be provided for models that are not enabled, but the
    # enabled model must have a corresponding parameter block

  wake_turbulence_parameters: # configure the parameters for the wake turbulence model selected above
    crespo_hernandez:
      initial: 0.1
      constant: 0.5
      ai: 0.8
      downstream: -0.32
    # additional blocks can be provided for models that are not enabled, but the
    # enabled model must have a corresponding parameter block
